// Prisma schema file for Omaliya Cosmetics
// Learn more: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product model
model Product {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  fullDescription String             @map("full_description") // Detailed product description
  imageUrls         String[]         @map("image_urls") // Array of image URLs
  categoryId        String           @db.ObjectId @map("category_id")
  category          ProductCategory  @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  priceLKR          Float            @map("price_lkr") // Price in LKR
  discountPriceLKR  Float?           @map("discount_price_lkr") // Optional discounted price in LKR
  priceUSD          Float            @map("price_usd") // Price in USD
  discountPriceUSD  Float?           @map("discount_price_usd") // Optional discounted price in USD
  stock             Int              @map("stock") // Stock quantity
  createdAt         DateTime         @default(now()) @map("created_at") // Timestamp for creation
  updatedAt         DateTime         @updatedAt @map("updated_at") // Timestamp for last update
  orderItems        OrderItem[]      // Relation to order items
  bundleOffers      ProductsOnBundles[] // Relation to bundle offers
  tags             ProductTag[]    @default([]) // Product promotional tags
}

// Enum for product promotional tags
enum ProductTag {
  NEW_ARRIVALS
  BEST_SELLERS
  SPECIAL_DEALS
  GIFT_SETS
  TRENDING_NOW
}

// ProductCategory model
model ProductCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String    @map("image_url") // Category image URL
  products    Product[] // Relation to products
}

// Review model
model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId @map("product_id")
  product   Product   @relation(fields: [productId], references: [id])
  userId    String    @db.ObjectId @map("user_id")
  customer  Customer  @relation(fields: [userId], references: [id])
  rating    Int       // Rating out of 5
  review    String?   // Optional review text
  date      DateTime  @default(now()) // Review date
}

// Customer model
model Customer {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  email         String    @unique
  passwordHash  String    @map("password_hash")
  registeredAt  DateTime  @default(now()) @map("registered_at")
  address       Address?  // Single address relation
  orders        Order[]
  reviews       Review[]
}

model Address {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  phoneNumber   String?   @map("phone_number")
  email         String?
  addressLine1  String    @map("address_line1")
  addressLine2  String?   @map("address_line2")
  city          String
  state         String?
  postalCode    String    @map("postal_code")
  country       String
  customerId    String?    @unique @db.ObjectId @map("customer_id") // Make unique for one-to-one
  customer      Customer?  @relation(fields: [customerId], references: [id])
  order         Order?     // Changed from Order[] to Order? for one-to-one
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

// Order model
model Order {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  customerId     String?       @db.ObjectId @map("customer_id")
  customer       Customer?     @relation(fields: [customerId], references: [id])
  orderDate      DateTime     @default(now()) @map("order_date")
  deliveredAt    DateTime?    @map("delivered_at")
  subtotal       Float        // Subtotal amount before discount
  discountAmount Float        @default(0) @map("discount_amount") // Fixed discount amount
  shipping       Float        // Shipping cost
  total          Float        // Total order amount after discounts
  currency       Currency     
  status         OrderStatus  @default(PENDING)
  notes          String?     
  items          OrderItem[]  
  trackingNumber String?      @map("tracking_number")
  paymentMethod  PaymentMethod
  addressId      String       @unique @db.ObjectId @map("address_id") // Added @unique for one-to-one
  address        Address      @relation(fields: [addressId], references: [id])
}

// Enum for payment methods
enum PaymentMethod {
  CASH_ON_DELIVERY
  PAY_HERE
  KOKO
}

// Enum for currencies
enum Currency {
  LKR
  USD
}

// PromoCode model
model PromoCode {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  code              String  @unique // Unique promo code
  discountPercentage Float   @map("discount_percentage") // Discount percentage
  createdAt         DateTime @default(now()) @map("created_at") // Timestamp for creation
  expiresAt         DateTime? @map("expires_at") // Optional expiration date
}

// Videos model
model Videos {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  videoUrl    String   @map("video_url")
  createdAt   DateTime @default(now()) @map("created_at")
  thumbnail   String  // Optional thumbnail image URL
  likes       Int      @default(0) // Number of likes
  views       Int      @default(0) // Number of views
  platform    String   // Video platform (YouTube, Vimeo, etc.)
}

// BundleOffer model
model BundleOffer {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  bundleName      String       @map("bundle_name") // Name of the bundle
  originalPriceLKR Float       @map("original_price_lkr") // Original price in LKR
  originalPriceUSD Float       @map("original_price_usd") // Original price in USD
  offerPriceLKR   Float        @map("offer_price_lkr") // Offer price in LKR
  offerPriceUSD   Float        @map("offer_price_usd") // Offer price in USD
  endDate         DateTime     @map("end_date") // Offer end date
  stock           Int
  imageUrl        String?      @map("image_url") // Optional image URL for the bundle
  createdAt       DateTime     @default(now()) @map("created_at") // Timestamp for creation
  orderItems      OrderItem[]  // Relation to order items
  products        ProductsOnBundles[] // Relation to products
}

model ProductsOnBundles {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  productId     String      @db.ObjectId @map("product_id")
  bundle        BundleOffer @relation(fields: [bundleId], references: [id])
  bundleId      String      @db.ObjectId @map("bundle_id")
}

// Admin model
model Admin {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  username      String  @unique // Unique username
  passwordHash  String  @map("password_hash") // Hashed password
  image         String? // Optional profile image
}

model OrderItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String       @db.ObjectId @map("order_id")
  order       Order        @relation(fields: [orderId], references: [id])
  productId   String?      @db.ObjectId @map("product_id")
  product     Product?     @relation(fields: [productId], references: [id])
  bundleId    String?      @db.ObjectId @map("bundle_id")
  bundle      BundleOffer? @relation(fields: [bundleId], references: [id])
  quantity    Int
  price       Float        // Price at time of order
  isBundle    Boolean      @default(false) @map("is_bundle")
}

// Enum for order statuses
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  CANCELED
  DELIVERED
}
// Prisma schema file for Omaliya Cosmetics
// Learn more: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product model
model Product {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  imageUrls         String[]         @map("image_urls") // Array of image URLs
  categoryId        String           @db.ObjectId @map("category_id")
  category          ProductCategory  @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  priceLKR          Float            @map("price_lkr") // Price in LKR
  discountPriceLKR  Float?           @map("discount_price_lkr") // Optional discounted price in LKR
  priceUSD          Float            @map("price_usd") // Price in USD
  discountPriceUSD  Float?           @map("discount_price_usd") // Optional discounted price in USD
  stock             Int              @map("stock") // Stock quantity
  createdAt         DateTime         @default(now()) @map("created_at") // Timestamp for creation
  updatedAt         DateTime         @updatedAt @map("updated_at") // Timestamp for last update
  orderItems        OrderItem[]      // Relation to order items
  bundleOffers      ProductsOnBundles[] // Relation to bundle offers
}

// ProductCategory model
model ProductCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String    @map("image_url") // Category image URL
  products    Product[] // Relation to products
}

// Review model
model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId @map("product_id")
  product   Product   @relation(fields: [productId], references: [id])
  userId    String    @db.ObjectId @map("user_id")
  customer  Customer  @relation(fields: [userId], references: [id])
  rating    Int       // Rating out of 5
  review    String?   // Optional review text
  date      DateTime  @default(now()) // Review date
}

// Customer model
model Customer {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?   @map("first_name") // Optional first name
  lastName      String?   @map("last_name") // Optional last name
  email         String?   @unique // Unique email address
  phoneNumber   String?   @map("phone_number") // Optional phone number
  passwordHash  String?   @map("password_hash") // Hashed password
  addressLine1  String?   @map("address_line1") // Optional address line 1
  addressLine2  String?   @map("address_line2") // Optional address line 2
  city          String?   // Optional city
  state         String?   // Optional state
  postalCode    String?   @map("postal_code") // Optional postal code
  country       String?   // Optional country
  isRegistered  Boolean   @default(false) @map("is_registered") // Registration status
  registeredAt  DateTime  @default(now()) @map("registered_at") // Registration timestamp
  orders        Order[]   // Relation to orders
  reviews       Review[]  // Relation to reviews
}

// Order model
model Order {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  customerId     String       @db.ObjectId @map("customer_id")
  customer       Customer     @relation(fields: [customerId], references: [id])
  orderDate      DateTime     @default(now()) @map("order_date") // Order date
  deliveredAt    DateTime?    @map("delivered_at") // Optional delivery date
  subtotal       Float        // Subtotal amount
  shipping       Float        // Shipping cost
  total          Float        // Total order amount
  currency       Currency      // Currency of the order
  status         OrderStatus  @default(PENDING) // Order status
  notes          String?      // Optional notes
  items          OrderItem[]  // Relation to order items
  trackingNumber String?      @map("tracking_number") // Optional tracking number
  paymentMethod  PaymentMethod @map("payment_method") // Payment method
}

// Enum for payment methods
enum PaymentMethod {
  CASH_ON_DELIVERY
  PAY_HERE
  KOKO
}

// Enum for currencies
enum Currency {
  LKR
  USD
}

// PromoCode model
model PromoCode {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  code              String  @unique // Unique promo code
  discountPercentage Float   @map("discount_percentage") // Discount percentage
  createdAt         DateTime @default(now()) @map("created_at") // Timestamp for creation
  expiresAt         DateTime? @map("expires_at") // Optional expiration date
}

// Videos model
model Videos {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String   @map("video_url")
  thumbnail   String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

// BundleOffer model
model BundleOffer {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  bundleName      String       @map("bundle_name") // Name of the bundle
  originalPriceLKR Float       @map("original_price_lkr") // Original price in LKR
  originalPriceUSD Float       @map("original_price_usd") // Original price in USD
  offerPriceLKR   Float        @map("offer_price_lkr") // Offer price in LKR
  offerPriceUSD   Float        @map("offer_price_usd") // Offer price in USD
  endDate         DateTime     @map("end_date") // Offer end date
  createdAt       DateTime     @default(now()) @map("created_at") // Timestamp for creation
  products        ProductsOnBundles[] // Relation to products
}

model ProductsOnBundles {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  productId     String      @db.ObjectId @map("product_id")
  bundle        BundleOffer @relation(fields: [bundleId], references: [id])
  bundleId      String      @db.ObjectId @map("bundle_id")
}

// Admin model
model Admin {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  username      String  @unique // Unique username
  passwordHash  String  @map("password_hash") // Hashed password
  image         String? // Optional profile image
}

// Settings model
model Settings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String?  @map("phone_number") // Optional phone number
  email       String?  // Optional email address
  links       String[] // Array of links (e.g., social media)
}

// OrderItem model
model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    // Price at time of order
}

// Enum for order statuses
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  CANCELED
  DELIVERED
}